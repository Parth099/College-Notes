{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 386
        },
        "id": "HNgWFTGXRVw5",
        "outputId": "9075da7f-662b-48da-886c-45ce7d8fee5a"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-baa0b616-0924-40a9-8db5-b03b0d76c9df\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-baa0b616-0924-40a9-8db5-b03b0d76c9df\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "mv: cannot stat './kaggle.json': No such file or directory\n",
            "chmod: cannot access '/root/.kaggle/kaggle.json': No such file or directory\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/bin/kaggle\", line 5, in <module>\n",
            "    from kaggle.cli import main\n",
            "  File \"/usr/local/lib/python3.9/dist-packages/kaggle/__init__.py\", line 23, in <module>\n",
            "    api.authenticate()\n",
            "  File \"/usr/local/lib/python3.9/dist-packages/kaggle/api/kaggle_api_extended.py\", line 164, in authenticate\n",
            "    raise IOError('Could not find {}. Make sure it\\'s located in'\n",
            "OSError: Could not find kaggle.json. Make sure it's located in /root/.kaggle. Or use the environment method.\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/bin/kaggle\", line 5, in <module>\n",
            "    from kaggle.cli import main\n",
            "  File \"/usr/local/lib/python3.9/dist-packages/kaggle/__init__.py\", line 23, in <module>\n",
            "    api.authenticate()\n",
            "  File \"/usr/local/lib/python3.9/dist-packages/kaggle/api/kaggle_api_extended.py\", line 164, in authenticate\n",
            "    raise IOError('Could not find {}. Make sure it\\'s located in'\n",
            "OSError: Could not find kaggle.json. Make sure it's located in /root/.kaggle. Or use the environment method.\n",
            "Archive:  ieee-fraud-detection.zip\n",
            "replace ./dataset/sample_submission.csv? [y]es, [n]o, [A]ll, [N]one, [r]ename: N\n"
          ]
        }
      ],
      "source": [
        "#! DO NOT RUN MORE THAN ONCE -> once data is loaded do not run this \n",
        "#! This will need to be ran if dataset is not loaded\n",
        "#! github save path: CompSci/CIS3715 - Principles of Data Science/Labs/Final Project/kaggle-CCFraud.ipynb\n",
        "# download kaggle dataset\n",
        "! pip install -q kaggle\n",
        "\n",
        "# create upload file prompt\n",
        "from google.colab import files\n",
        "files.upload()\n",
        "\n",
        "# store data at ~\n",
        "! rm -r ~/.kaggle\n",
        "! mkdir ~/.kaggle\n",
        "! mv ./kaggle.json ~/.kaggle/\n",
        "\n",
        "# give u=rw privs\n",
        "! chmod 600 ~/.kaggle/kaggle.json \n",
        "\n",
        "# check if we downloaded the data\n",
        "! kaggle competitions download -c ieee-fraud-detection\n",
        "! kaggle datasets list | grep \"ieee\"\n",
        "\n",
        "# extract the data\n",
        "! mkdir -p dataset\n",
        "! unzip -d ./dataset/ ieee-fraud-detection.zip"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GtCN_ZoHAkzG"
      },
      "source": [
        "# Exploratory Data Analysis"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2VStIekSFbfI"
      },
      "source": [
        "## Dataset Information"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "h8tl_S7IFeaj"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Link to Kaggle Dataset: https://www.kaggle.com/competitions/ieee-fraud-detection/\n",
        "# read in dataset\n",
        "train_transaction = pd.read_csv(f'./dataset/train_transaction.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "KQTpkAUnFjHp",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 411
        },
        "outputId": "da9a96ee-18d2-4e7d-f5d5-28fcb1d616f8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape of the Training Dataset: (590540, 394)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       TransactionID        isFraud  TransactionDT  TransactionAmt  \\\n",
              "count   5.905400e+05  590540.000000   5.905400e+05   590540.000000   \n",
              "mean    3.282270e+06       0.034990   7.372311e+06      135.027176   \n",
              "std     1.704744e+05       0.183755   4.617224e+06      239.162522   \n",
              "min     2.987000e+06       0.000000   8.640000e+04        0.251000   \n",
              "25%     3.134635e+06       0.000000   3.027058e+06       43.321000   \n",
              "50%     3.282270e+06       0.000000   7.306528e+06       68.769000   \n",
              "75%     3.429904e+06       0.000000   1.124662e+07      125.000000   \n",
              "max     3.577539e+06       1.000000   1.581113e+07    31937.391000   \n",
              "\n",
              "               card1          card2          card3          card5  \\\n",
              "count  590540.000000  581607.000000  588975.000000  586281.000000   \n",
              "mean     9898.734658     362.555488     153.194925     199.278897   \n",
              "std      4901.170153     157.793246      11.336444      41.244453   \n",
              "min      1000.000000     100.000000     100.000000     100.000000   \n",
              "25%      6019.000000     214.000000     150.000000     166.000000   \n",
              "50%      9678.000000     361.000000     150.000000     226.000000   \n",
              "75%     14184.000000     512.000000     150.000000     226.000000   \n",
              "max     18396.000000     600.000000     231.000000     237.000000   \n",
              "\n",
              "               addr1          addr2  ...          V330           V331  \\\n",
              "count  524834.000000  524834.000000  ...  82351.000000   82351.000000   \n",
              "mean      290.733794      86.800630  ...      0.775874     721.741883   \n",
              "std       101.741072       2.690623  ...      4.727971    6217.223583   \n",
              "min       100.000000      10.000000  ...      0.000000       0.000000   \n",
              "25%       204.000000      87.000000  ...      0.000000       0.000000   \n",
              "50%       299.000000      87.000000  ...      0.000000       0.000000   \n",
              "75%       330.000000      87.000000  ...      0.000000       0.000000   \n",
              "max       540.000000     102.000000  ...     55.000000  160000.000000   \n",
              "\n",
              "                V332           V333          V334         V335          V336  \\\n",
              "count   82351.000000   82351.000000  82351.000000  82351.00000  82351.000000   \n",
              "mean     1375.783644    1014.622782      9.807015     59.16455     28.530903   \n",
              "std     11169.275702    7955.735482    243.861391    387.62948    274.576920   \n",
              "min         0.000000       0.000000      0.000000      0.00000      0.000000   \n",
              "25%         0.000000       0.000000      0.000000      0.00000      0.000000   \n",
              "50%         0.000000       0.000000      0.000000      0.00000      0.000000   \n",
              "75%        25.000000       0.000000      0.000000      0.00000      0.000000   \n",
              "max    160000.000000  160000.000000  55125.000000  55125.00000  55125.000000   \n",
              "\n",
              "                V337           V338           V339  \n",
              "count   82351.000000   82351.000000   82351.000000  \n",
              "mean       55.352422     151.160542     100.700882  \n",
              "std       668.486833    1095.034387     814.946722  \n",
              "min         0.000000       0.000000       0.000000  \n",
              "25%         0.000000       0.000000       0.000000  \n",
              "50%         0.000000       0.000000       0.000000  \n",
              "75%         0.000000       0.000000       0.000000  \n",
              "max    104060.000000  104060.000000  104060.000000  \n",
              "\n",
              "[8 rows x 380 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b0dbee10-f7ae-4416-bffc-82827801543a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>TransactionID</th>\n",
              "      <th>isFraud</th>\n",
              "      <th>TransactionDT</th>\n",
              "      <th>TransactionAmt</th>\n",
              "      <th>card1</th>\n",
              "      <th>card2</th>\n",
              "      <th>card3</th>\n",
              "      <th>card5</th>\n",
              "      <th>addr1</th>\n",
              "      <th>addr2</th>\n",
              "      <th>...</th>\n",
              "      <th>V330</th>\n",
              "      <th>V331</th>\n",
              "      <th>V332</th>\n",
              "      <th>V333</th>\n",
              "      <th>V334</th>\n",
              "      <th>V335</th>\n",
              "      <th>V336</th>\n",
              "      <th>V337</th>\n",
              "      <th>V338</th>\n",
              "      <th>V339</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>5.905400e+05</td>\n",
              "      <td>590540.000000</td>\n",
              "      <td>5.905400e+05</td>\n",
              "      <td>590540.000000</td>\n",
              "      <td>590540.000000</td>\n",
              "      <td>581607.000000</td>\n",
              "      <td>588975.000000</td>\n",
              "      <td>586281.000000</td>\n",
              "      <td>524834.000000</td>\n",
              "      <td>524834.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>82351.000000</td>\n",
              "      <td>82351.000000</td>\n",
              "      <td>82351.000000</td>\n",
              "      <td>82351.000000</td>\n",
              "      <td>82351.000000</td>\n",
              "      <td>82351.00000</td>\n",
              "      <td>82351.000000</td>\n",
              "      <td>82351.000000</td>\n",
              "      <td>82351.000000</td>\n",
              "      <td>82351.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>3.282270e+06</td>\n",
              "      <td>0.034990</td>\n",
              "      <td>7.372311e+06</td>\n",
              "      <td>135.027176</td>\n",
              "      <td>9898.734658</td>\n",
              "      <td>362.555488</td>\n",
              "      <td>153.194925</td>\n",
              "      <td>199.278897</td>\n",
              "      <td>290.733794</td>\n",
              "      <td>86.800630</td>\n",
              "      <td>...</td>\n",
              "      <td>0.775874</td>\n",
              "      <td>721.741883</td>\n",
              "      <td>1375.783644</td>\n",
              "      <td>1014.622782</td>\n",
              "      <td>9.807015</td>\n",
              "      <td>59.16455</td>\n",
              "      <td>28.530903</td>\n",
              "      <td>55.352422</td>\n",
              "      <td>151.160542</td>\n",
              "      <td>100.700882</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.704744e+05</td>\n",
              "      <td>0.183755</td>\n",
              "      <td>4.617224e+06</td>\n",
              "      <td>239.162522</td>\n",
              "      <td>4901.170153</td>\n",
              "      <td>157.793246</td>\n",
              "      <td>11.336444</td>\n",
              "      <td>41.244453</td>\n",
              "      <td>101.741072</td>\n",
              "      <td>2.690623</td>\n",
              "      <td>...</td>\n",
              "      <td>4.727971</td>\n",
              "      <td>6217.223583</td>\n",
              "      <td>11169.275702</td>\n",
              "      <td>7955.735482</td>\n",
              "      <td>243.861391</td>\n",
              "      <td>387.62948</td>\n",
              "      <td>274.576920</td>\n",
              "      <td>668.486833</td>\n",
              "      <td>1095.034387</td>\n",
              "      <td>814.946722</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>2.987000e+06</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>8.640000e+04</td>\n",
              "      <td>0.251000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>3.134635e+06</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.027058e+06</td>\n",
              "      <td>43.321000</td>\n",
              "      <td>6019.000000</td>\n",
              "      <td>214.000000</td>\n",
              "      <td>150.000000</td>\n",
              "      <td>166.000000</td>\n",
              "      <td>204.000000</td>\n",
              "      <td>87.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>3.282270e+06</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>7.306528e+06</td>\n",
              "      <td>68.769000</td>\n",
              "      <td>9678.000000</td>\n",
              "      <td>361.000000</td>\n",
              "      <td>150.000000</td>\n",
              "      <td>226.000000</td>\n",
              "      <td>299.000000</td>\n",
              "      <td>87.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>3.429904e+06</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.124662e+07</td>\n",
              "      <td>125.000000</td>\n",
              "      <td>14184.000000</td>\n",
              "      <td>512.000000</td>\n",
              "      <td>150.000000</td>\n",
              "      <td>226.000000</td>\n",
              "      <td>330.000000</td>\n",
              "      <td>87.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>25.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>3.577539e+06</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.581113e+07</td>\n",
              "      <td>31937.391000</td>\n",
              "      <td>18396.000000</td>\n",
              "      <td>600.000000</td>\n",
              "      <td>231.000000</td>\n",
              "      <td>237.000000</td>\n",
              "      <td>540.000000</td>\n",
              "      <td>102.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>55.000000</td>\n",
              "      <td>160000.000000</td>\n",
              "      <td>160000.000000</td>\n",
              "      <td>160000.000000</td>\n",
              "      <td>55125.000000</td>\n",
              "      <td>55125.00000</td>\n",
              "      <td>55125.000000</td>\n",
              "      <td>104060.000000</td>\n",
              "      <td>104060.000000</td>\n",
              "      <td>104060.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows × 380 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b0dbee10-f7ae-4416-bffc-82827801543a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b0dbee10-f7ae-4416-bffc-82827801543a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b0dbee10-f7ae-4416-bffc-82827801543a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "print(f'Shape of the Training Dataset: {train_transaction.shape}')\n",
        "\n",
        "train_transaction.head()\n",
        "train_transaction.describe()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xRDx5Nh9AyqX"
      },
      "source": [
        "## Dataset Balance"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "Tzawsp2NCGG_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "outputId": "2811d26c-0c9a-46e6-8485-49a0f12e61f3"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import numpy as np\n",
        "\n",
        "# obtain ground truth from train column\n",
        "is_fruad = train_transaction['isFraud'].values\n",
        "\n",
        "# get counts of fruad and not fruad\n",
        "__num_valid = np.sum(is_fruad == 0)\n",
        "__num_fruad = is_fruad.size - __num_valid\n",
        "\n",
        "plt.bar([0, 1], [__num_valid, __num_fruad], color=['blue', 'red'], tick_label=[f\"Valid - {__num_valid}\", f\"Fruad - {__num_fruad}\"])\n",
        "plt.title('is_fruad')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Q-6ZTkf8GMdA"
      },
      "source": [
        "## Removal of Features with **too** many missing Values\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "UrW2mdZ-GZZ9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1b0de578-ab41-47d4-a57a-762a1a5f592e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape of the Training Dataset where features missing over 75.0% of their data were removed: (590540, 182)\n"
          ]
        }
      ],
      "source": [
        "MISSING_TOLERANCE = 0.75 # if missing percent over 75% throw out the feature\n",
        "\n",
        "num_missing_by_feature = train_transaction.isna().sum() / train_transaction.shape[0]\n",
        "features_to_remove = []\n",
        "\n",
        "for feature, percent_missing in num_missing_by_feature.iteritems():\n",
        "  if percent_missing <= 1 - MISSING_TOLERANCE: continue\n",
        "  features_to_remove.append(feature)\n",
        "\n",
        "# drop features that cannot be recovered\n",
        "train_transaction_features_removed = train_transaction.drop(columns=features_to_remove)\n",
        "\n",
        "# show new shape\n",
        "print(f'Shape of the Training Dataset where features missing over {MISSING_TOLERANCE * 100}% of their data were removed: {train_transaction_features_removed.shape}')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3Q6GEmYUJp2k"
      },
      "source": [
        "## Filling in missing Values based on Distribution Type"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "JALHgUoNNDaO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3661c0aa-f71a-49fa-f6cc-dc20df758d0d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "TransactionID      0\n",
              "isFraud            0\n",
              "TransactionDT      0\n",
              "TransactionAmt     0\n",
              "ProductCD          0\n",
              "                  ..\n",
              "V317              12\n",
              "V318              12\n",
              "V319              12\n",
              "V320              12\n",
              "V321              12\n",
              "Length: 182, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "missing_metadata = train_transaction_features_removed.isna().sum()\n",
        "missing_metadata"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "NRELP479NUqC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "15740968-6c84-4426-ecb4-29f65f6bbd2a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Feature: \"TransactionID\" is missing 0 values and is_numeric=True\n",
            "Feature: \"isFraud\" is missing 0 values and is_numeric=True\n",
            "Feature: \"TransactionDT\" is missing 0 values and is_numeric=True\n",
            "Feature: \"TransactionAmt\" is missing 0 values and is_numeric=True\n",
            "Feature: \"ProductCD\" is missing 0 values and is_numeric=False\n",
            "Feature: \"card1\" is missing 0 values and is_numeric=True\n",
            "Feature: \"card2\" is missing 8933 values and is_numeric=True\n",
            "Feature: \"card3\" is missing 1565 values and is_numeric=True\n",
            "Feature: \"card4\" is missing 1577 values and is_numeric=False\n",
            "Feature: \"card5\" is missing 4259 values and is_numeric=True\n",
            "Feature: \"card6\" is missing 1571 values and is_numeric=False\n",
            "Feature: \"addr1\" is missing 65706 values and is_numeric=True\n",
            "Feature: \"addr2\" is missing 65706 values and is_numeric=True\n",
            "Feature: \"P_emaildomain\" is missing 94456 values and is_numeric=False\n",
            "Feature: \"C1\" is missing 0 values and is_numeric=True\n",
            "Feature: \"C2\" is missing 0 values and is_numeric=True\n",
            "Feature: \"C3\" is missing 0 values and is_numeric=True\n",
            "Feature: \"C4\" is missing 0 values and is_numeric=True\n",
            "Feature: \"C5\" is missing 0 values and is_numeric=True\n",
            "Feature: \"C6\" is missing 0 values and is_numeric=True\n",
            "Feature: \"C7\" is missing 0 values and is_numeric=True\n",
            "Feature: \"C8\" is missing 0 values and is_numeric=True\n",
            "Feature: \"C9\" is missing 0 values and is_numeric=True\n",
            "Feature: \"C10\" is missing 0 values and is_numeric=True\n",
            "Feature: \"C11\" is missing 0 values and is_numeric=True\n",
            "Feature: \"C12\" is missing 0 values and is_numeric=True\n",
            "Feature: \"C13\" is missing 0 values and is_numeric=True\n",
            "Feature: \"C14\" is missing 0 values and is_numeric=True\n",
            "Feature: \"D1\" is missing 1269 values and is_numeric=True\n",
            "Feature: \"D10\" is missing 76022 values and is_numeric=True\n",
            "Feature: \"D15\" is missing 89113 values and is_numeric=True\n",
            "Feature: \"V12\" is missing 76073 values and is_numeric=True\n",
            "Feature: \"V13\" is missing 76073 values and is_numeric=True\n",
            "Feature: \"V14\" is missing 76073 values and is_numeric=True\n",
            "Feature: \"V15\" is missing 76073 values and is_numeric=True\n",
            "Feature: \"V16\" is missing 76073 values and is_numeric=True\n",
            "Feature: \"V17\" is missing 76073 values and is_numeric=True\n",
            "Feature: \"V18\" is missing 76073 values and is_numeric=True\n",
            "Feature: \"V19\" is missing 76073 values and is_numeric=True\n",
            "Feature: \"V20\" is missing 76073 values and is_numeric=True\n",
            "Feature: \"V21\" is missing 76073 values and is_numeric=True\n",
            "Feature: \"V22\" is missing 76073 values and is_numeric=True\n",
            "Feature: \"V23\" is missing 76073 values and is_numeric=True\n",
            "Feature: \"V24\" is missing 76073 values and is_numeric=True\n",
            "Feature: \"V25\" is missing 76073 values and is_numeric=True\n",
            "Feature: \"V26\" is missing 76073 values and is_numeric=True\n",
            "Feature: \"V27\" is missing 76073 values and is_numeric=True\n",
            "Feature: \"V28\" is missing 76073 values and is_numeric=True\n",
            "Feature: \"V29\" is missing 76073 values and is_numeric=True\n",
            "Feature: \"V30\" is missing 76073 values and is_numeric=True\n",
            "Feature: \"V31\" is missing 76073 values and is_numeric=True\n",
            "Feature: \"V32\" is missing 76073 values and is_numeric=True\n",
            "Feature: \"V33\" is missing 76073 values and is_numeric=True\n",
            "Feature: \"V34\" is missing 76073 values and is_numeric=True\n",
            "Feature: \"V53\" is missing 77096 values and is_numeric=True\n",
            "Feature: \"V54\" is missing 77096 values and is_numeric=True\n",
            "Feature: \"V55\" is missing 77096 values and is_numeric=True\n",
            "Feature: \"V56\" is missing 77096 values and is_numeric=True\n",
            "Feature: \"V57\" is missing 77096 values and is_numeric=True\n",
            "Feature: \"V58\" is missing 77096 values and is_numeric=True\n",
            "Feature: \"V59\" is missing 77096 values and is_numeric=True\n",
            "Feature: \"V60\" is missing 77096 values and is_numeric=True\n",
            "Feature: \"V61\" is missing 77096 values and is_numeric=True\n",
            "Feature: \"V62\" is missing 77096 values and is_numeric=True\n",
            "Feature: \"V63\" is missing 77096 values and is_numeric=True\n",
            "Feature: \"V64\" is missing 77096 values and is_numeric=True\n",
            "Feature: \"V65\" is missing 77096 values and is_numeric=True\n",
            "Feature: \"V66\" is missing 77096 values and is_numeric=True\n",
            "Feature: \"V67\" is missing 77096 values and is_numeric=True\n",
            "Feature: \"V68\" is missing 77096 values and is_numeric=True\n",
            "Feature: \"V69\" is missing 77096 values and is_numeric=True\n",
            "Feature: \"V70\" is missing 77096 values and is_numeric=True\n",
            "Feature: \"V71\" is missing 77096 values and is_numeric=True\n",
            "Feature: \"V72\" is missing 77096 values and is_numeric=True\n",
            "Feature: \"V73\" is missing 77096 values and is_numeric=True\n",
            "Feature: \"V74\" is missing 77096 values and is_numeric=True\n",
            "Feature: \"V75\" is missing 89164 values and is_numeric=True\n",
            "Feature: \"V76\" is missing 89164 values and is_numeric=True\n",
            "Feature: \"V77\" is missing 89164 values and is_numeric=True\n",
            "Feature: \"V78\" is missing 89164 values and is_numeric=True\n",
            "Feature: \"V79\" is missing 89164 values and is_numeric=True\n",
            "Feature: \"V80\" is missing 89164 values and is_numeric=True\n",
            "Feature: \"V81\" is missing 89164 values and is_numeric=True\n",
            "Feature: \"V82\" is missing 89164 values and is_numeric=True\n",
            "Feature: \"V83\" is missing 89164 values and is_numeric=True\n",
            "Feature: \"V84\" is missing 89164 values and is_numeric=True\n",
            "Feature: \"V85\" is missing 89164 values and is_numeric=True\n",
            "Feature: \"V86\" is missing 89164 values and is_numeric=True\n",
            "Feature: \"V87\" is missing 89164 values and is_numeric=True\n",
            "Feature: \"V88\" is missing 89164 values and is_numeric=True\n",
            "Feature: \"V89\" is missing 89164 values and is_numeric=True\n",
            "Feature: \"V90\" is missing 89164 values and is_numeric=True\n",
            "Feature: \"V91\" is missing 89164 values and is_numeric=True\n",
            "Feature: \"V92\" is missing 89164 values and is_numeric=True\n",
            "Feature: \"V93\" is missing 89164 values and is_numeric=True\n",
            "Feature: \"V94\" is missing 89164 values and is_numeric=True\n",
            "Feature: \"V95\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V96\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V97\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V98\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V99\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V100\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V101\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V102\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V103\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V104\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V105\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V106\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V107\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V108\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V109\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V110\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V111\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V112\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V113\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V114\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V115\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V116\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V117\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V118\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V119\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V120\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V121\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V122\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V123\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V124\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V125\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V126\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V127\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V128\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V129\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V130\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V131\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V132\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V133\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V134\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V135\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V136\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V137\" is missing 314 values and is_numeric=True\n",
            "Feature: \"V279\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V280\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V281\" is missing 1269 values and is_numeric=True\n",
            "Feature: \"V282\" is missing 1269 values and is_numeric=True\n",
            "Feature: \"V283\" is missing 1269 values and is_numeric=True\n",
            "Feature: \"V284\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V285\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V286\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V287\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V288\" is missing 1269 values and is_numeric=True\n",
            "Feature: \"V289\" is missing 1269 values and is_numeric=True\n",
            "Feature: \"V290\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V291\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V292\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V293\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V294\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V295\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V296\" is missing 1269 values and is_numeric=True\n",
            "Feature: \"V297\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V298\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V299\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V300\" is missing 1269 values and is_numeric=True\n",
            "Feature: \"V301\" is missing 1269 values and is_numeric=True\n",
            "Feature: \"V302\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V303\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V304\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V305\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V306\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V307\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V308\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V309\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V310\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V311\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V312\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V313\" is missing 1269 values and is_numeric=True\n",
            "Feature: \"V314\" is missing 1269 values and is_numeric=True\n",
            "Feature: \"V315\" is missing 1269 values and is_numeric=True\n",
            "Feature: \"V316\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V317\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V318\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V319\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V320\" is missing 12 values and is_numeric=True\n",
            "Feature: \"V321\" is missing 12 values and is_numeric=True\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "\n",
        "for feature, num_missing in missing_metadata.items():\n",
        "  # numpy array of data that is present\n",
        "  feature_data = train_transaction_features_removed[feature].values\n",
        "  \n",
        "  # check if array is numeric\n",
        "  is_numeric = np.issubdtype(feature_data.dtype, np.number)\n",
        "\n",
        "  print(f'Feature: \"{feature}\" is missing {num_missing} values and is_numeric={is_numeric}')                                            "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MGR3fJo6IGh1"
      },
      "source": [
        "## Shift Categorical Features to Numerical without touching `NaN` values\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "miDXyHEiIZTv"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "def label_encode_categorical(df):\n",
        "    \"\"\"\n",
        "    Encodes all categorical features in a DataFrame using LabelEncoder.\n",
        "    \"\"\"\n",
        "    # encoder\n",
        "    le = LabelEncoder()\n",
        "\n",
        "    # save all values we shifted\n",
        "    replaced = []\n",
        "    for col in df.columns:\n",
        "        if df[col].dtype == 'object':\n",
        "\n",
        "            replaced.append(col)\n",
        "\n",
        "            # fill NaN values with a placeholder value before encoding\n",
        "            df[col] = df[col].fillna('N/A')\n",
        "\n",
        "            # fit with data and cast\n",
        "            df[col] = le.fit_transform(df[col])\n",
        "\n",
        "            # restore NaN values if they were ever present\n",
        "            if missing_metadata[col] > 0:\n",
        "              df[col] = df[col].where(df[col] != le.transform(['N/A'])[0], np.nan)\n",
        "\n",
        "    return df, replaced\n",
        "\n",
        "train_transaction_features_removed_all_numerical_with_nan, replaced = label_encode_categorical(train_transaction_features_removed)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6FtsHoSxQcTq"
      },
      "source": [
        "## Fill in Missing Values using Mean/Mode/Median values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "tGXq2TRrQj0j"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "from scipy.stats import skew as scipy_skew\n",
        "from numpy import mean, median\n",
        "\n",
        "SKEW_TOLERANCE = 0.5\n",
        "\n",
        "def apply_numerical_scaler_to_frame(df: pd.DataFrame, Scaler, features_to_ignore):\n",
        "\n",
        "  # only scale those features we didnt ignore and have missing features\n",
        "  features_to_scale = [feature for feature, num_missing in missing_metadata.items() if feature not in features_to_ignore and num_missing > 0]\n",
        "\n",
        "\n",
        "  # replacement history\n",
        "  replacement_history = {}\n",
        "\n",
        "  for col in features_to_scale:\n",
        "    # get all values they arent null from $col\n",
        "    values = df[col].values\n",
        "    non_nan_values = values[~np.isnan(values)]\n",
        "\n",
        "    # obtain skew\n",
        "    abs_skew = np.abs(scipy_skew(non_nan_values))\n",
        "\n",
        "    # choose which function to apply to find a good replacement\n",
        "    replacer = median if abs_skew >= SKEW_TOLERANCE else mean\n",
        "\n",
        "    # calc replace value\n",
        "    replace_val = replacer(non_nan_values)\n",
        "\n",
        "    # record replacement value for test\n",
        "    replacement_history[col] = replace_val\n",
        "\n",
        "    # apply it\n",
        "    df[col].replace({np.nan: replace_val}, inplace=True)\n",
        "\n",
        "\n",
        "  return df, replacement_history\n",
        "\n",
        "# swappable scaler\n",
        "Scaler = StandardScaler()\n",
        "\n",
        "# scale all features\n",
        "features_to_ignore = replaced\n",
        "train_transaction_features_removed_all_numerical_no_num_nan, replacement_history = apply_numerical_scaler_to_frame(train_transaction_features_removed_all_numerical_with_nan, \n",
        "                                                                                          Scaler, \n",
        "                                                                                          features_to_ignore)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_transaction_features_removed_all_numerical_no_num_nan"
      ],
      "metadata": {
        "id": "0IswIHdbKHQT",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "outputId": "c0e55cb0-23a3-4945-b90b-6c9d4e1e2a0e"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        TransactionID  isFraud  TransactionDT  TransactionAmt  ProductCD  \\\n",
              "0             2987000        0          86400           68.50          4   \n",
              "1             2987001        0          86401           29.00          4   \n",
              "2             2987002        0          86469           59.00          4   \n",
              "3             2987003        0          86499           50.00          4   \n",
              "4             2987004        0          86506           50.00          1   \n",
              "...               ...      ...            ...             ...        ...   \n",
              "590535        3577535        0       15811047           49.00          4   \n",
              "590536        3577536        0       15811049           39.50          4   \n",
              "590537        3577537        0       15811079           30.95          4   \n",
              "590538        3577538        0       15811088          117.00          4   \n",
              "590539        3577539        0       15811131          279.95          4   \n",
              "\n",
              "        card1       card2  card3  card4  card5  ...   V312        V313  \\\n",
              "0       13926  362.555488  150.0    2.0  142.0  ...    0.0    0.000000   \n",
              "1        2755  404.000000  150.0    3.0  102.0  ...    0.0    0.000000   \n",
              "2        4663  490.000000  150.0    4.0  166.0  ...    0.0    0.000000   \n",
              "3       18132  567.000000  150.0    3.0  117.0  ...  135.0    0.000000   \n",
              "4        4497  514.000000  150.0    3.0  102.0  ...    0.0    0.000000   \n",
              "...       ...         ...    ...    ...    ...  ...    ...         ...   \n",
              "590535   6550  362.555488  150.0    4.0  226.0  ...    0.0   47.950001   \n",
              "590536  10444  225.000000  150.0    3.0  224.0  ...    0.0    0.000000   \n",
              "590537  12037  595.000000  150.0    3.0  224.0  ...    0.0    0.000000   \n",
              "590538   7826  481.000000  150.0    3.0  224.0  ...  117.0  317.500000   \n",
              "590539  15066  170.000000  150.0    3.0  102.0  ...    0.0    0.000000   \n",
              "\n",
              "              V314        V315  V316    V317   V318        V319        V320  \\\n",
              "0         0.000000    0.000000   0.0   117.0    0.0    0.000000    0.000000   \n",
              "1         0.000000    0.000000   0.0     0.0    0.0    0.000000    0.000000   \n",
              "2         0.000000    0.000000   0.0     0.0    0.0    0.000000    0.000000   \n",
              "3         0.000000    0.000000  50.0  1404.0  790.0    0.000000    0.000000   \n",
              "4         0.000000    0.000000   0.0     0.0    0.0    0.000000    0.000000   \n",
              "...            ...         ...   ...     ...    ...         ...         ...   \n",
              "590535   47.950001   47.950001   0.0     0.0    0.0    0.000000    0.000000   \n",
              "590536    0.000000    0.000000   0.0     0.0    0.0    0.000000    0.000000   \n",
              "590537    0.000000    0.000000   0.0     0.0    0.0    0.000000    0.000000   \n",
              "590538  669.500000  317.500000   0.0  2234.0    0.0    0.000000    0.000000   \n",
              "590539    0.000000    0.000000   0.0     0.0    0.0  279.950012  279.950012   \n",
              "\n",
              "              V321  \n",
              "0         0.000000  \n",
              "1         0.000000  \n",
              "2         0.000000  \n",
              "3         0.000000  \n",
              "4         0.000000  \n",
              "...            ...  \n",
              "590535    0.000000  \n",
              "590536    0.000000  \n",
              "590537    0.000000  \n",
              "590538    0.000000  \n",
              "590539  279.950012  \n",
              "\n",
              "[590540 rows x 182 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a338716c-bce6-4899-8562-af80605c1e93\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>TransactionID</th>\n",
              "      <th>isFraud</th>\n",
              "      <th>TransactionDT</th>\n",
              "      <th>TransactionAmt</th>\n",
              "      <th>ProductCD</th>\n",
              "      <th>card1</th>\n",
              "      <th>card2</th>\n",
              "      <th>card3</th>\n",
              "      <th>card4</th>\n",
              "      <th>card5</th>\n",
              "      <th>...</th>\n",
              "      <th>V312</th>\n",
              "      <th>V313</th>\n",
              "      <th>V314</th>\n",
              "      <th>V315</th>\n",
              "      <th>V316</th>\n",
              "      <th>V317</th>\n",
              "      <th>V318</th>\n",
              "      <th>V319</th>\n",
              "      <th>V320</th>\n",
              "      <th>V321</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2987000</td>\n",
              "      <td>0</td>\n",
              "      <td>86400</td>\n",
              "      <td>68.50</td>\n",
              "      <td>4</td>\n",
              "      <td>13926</td>\n",
              "      <td>362.555488</td>\n",
              "      <td>150.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>142.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>117.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2987001</td>\n",
              "      <td>0</td>\n",
              "      <td>86401</td>\n",
              "      <td>29.00</td>\n",
              "      <td>4</td>\n",
              "      <td>2755</td>\n",
              "      <td>404.000000</td>\n",
              "      <td>150.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2987002</td>\n",
              "      <td>0</td>\n",
              "      <td>86469</td>\n",
              "      <td>59.00</td>\n",
              "      <td>4</td>\n",
              "      <td>4663</td>\n",
              "      <td>490.000000</td>\n",
              "      <td>150.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>166.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2987003</td>\n",
              "      <td>0</td>\n",
              "      <td>86499</td>\n",
              "      <td>50.00</td>\n",
              "      <td>4</td>\n",
              "      <td>18132</td>\n",
              "      <td>567.000000</td>\n",
              "      <td>150.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>117.0</td>\n",
              "      <td>...</td>\n",
              "      <td>135.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>50.0</td>\n",
              "      <td>1404.0</td>\n",
              "      <td>790.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2987004</td>\n",
              "      <td>0</td>\n",
              "      <td>86506</td>\n",
              "      <td>50.00</td>\n",
              "      <td>1</td>\n",
              "      <td>4497</td>\n",
              "      <td>514.000000</td>\n",
              "      <td>150.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>590535</th>\n",
              "      <td>3577535</td>\n",
              "      <td>0</td>\n",
              "      <td>15811047</td>\n",
              "      <td>49.00</td>\n",
              "      <td>4</td>\n",
              "      <td>6550</td>\n",
              "      <td>362.555488</td>\n",
              "      <td>150.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>226.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>47.950001</td>\n",
              "      <td>47.950001</td>\n",
              "      <td>47.950001</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>590536</th>\n",
              "      <td>3577536</td>\n",
              "      <td>0</td>\n",
              "      <td>15811049</td>\n",
              "      <td>39.50</td>\n",
              "      <td>4</td>\n",
              "      <td>10444</td>\n",
              "      <td>225.000000</td>\n",
              "      <td>150.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>224.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>590537</th>\n",
              "      <td>3577537</td>\n",
              "      <td>0</td>\n",
              "      <td>15811079</td>\n",
              "      <td>30.95</td>\n",
              "      <td>4</td>\n",
              "      <td>12037</td>\n",
              "      <td>595.000000</td>\n",
              "      <td>150.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>224.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>590538</th>\n",
              "      <td>3577538</td>\n",
              "      <td>0</td>\n",
              "      <td>15811088</td>\n",
              "      <td>117.00</td>\n",
              "      <td>4</td>\n",
              "      <td>7826</td>\n",
              "      <td>481.000000</td>\n",
              "      <td>150.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>224.0</td>\n",
              "      <td>...</td>\n",
              "      <td>117.0</td>\n",
              "      <td>317.500000</td>\n",
              "      <td>669.500000</td>\n",
              "      <td>317.500000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2234.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>590539</th>\n",
              "      <td>3577539</td>\n",
              "      <td>0</td>\n",
              "      <td>15811131</td>\n",
              "      <td>279.95</td>\n",
              "      <td>4</td>\n",
              "      <td>15066</td>\n",
              "      <td>170.000000</td>\n",
              "      <td>150.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>279.950012</td>\n",
              "      <td>279.950012</td>\n",
              "      <td>279.950012</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>590540 rows × 182 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a338716c-bce6-4899-8562-af80605c1e93')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a338716c-bce6-4899-8562-af80605c1e93 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a338716c-bce6-4899-8562-af80605c1e93');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "machine_shape": "hm"
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "gpuClass": "standard"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}